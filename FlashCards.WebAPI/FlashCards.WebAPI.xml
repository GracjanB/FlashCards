<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FlashCards.WebAPI</name>
    </assembly>
    <members>
        <member name="M:FlashCards.WebAPI.Controllers.AuthController.Register(FlashCards.Models.DTOs.ToServer.UserForRegister)">
            <summary>
            Creates new account
            </summary>
            <remarks>
            Sample request:
            
                POST /api/auth/login
                    {
                        "email": "sample@sample.com",
                        "password": "samplepassword",
                        "displayName": "sampleName",
                        "firstName": "someFirstName",
                        "lastName": "someLastName",
                        "city": "someCity",
                        "country": "someCountry"
                    }
                    
            </remarks>
            <param name="userForRegister"></param>
            <returns>Status</returns>
            <response code="200">If registration was successful</response>
            <response code="400">When incoming data was invalid. Returns model state information</response>
            <response code="500">When occured error during registration</response>
            POST: api/auth/register
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.AuthController.Login(FlashCards.Models.DTOs.ToServer.UserForLogin)">
            <summary>
            Login user
            </summary>
            <remarks>
            Sample request:
            
                POST /api/auth/login
                {
                    "email": "sample@sample.com",
                    "password": "samplepassword"
                }
                
            </remarks>
            <param name="userForLogin"></param>
            <returns>Access token and detailed information about user</returns>
            <response code="200">Returns access token and detailed information about user</response>
            <response code="400">When incoming data was invalid. Returns model state information</response>
            <response code="401">When email or password was invalid</response>
            POST: api/auth/login
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.CoursesController.CreateCourse(FlashCards.Models.DTOs.ToServer.CourseForCreate)">
            <summary>
            Creates a new course
            </summary>
            <remarks>
            Sample request:
            
                POST /api/courses
                    {
                        "name": "Course name",
                        "description": "Course sample description",
                        "courseType": 0, 
                        "accountId": 2
                    }
            
            Additional information:
                - For "courseType" -> (0 - public, 1 - private, 2 - draft)
            </remarks>
            <param name="courseForCreate">DTO</param>
            <returns>Status</returns>
            <response code="200">If creation was successful</response>
            <response code="400">If sent data was invalid</response>
            <response code="401">If token has expired or account id from token does not match with given in DTO</response>
            <response code="500">If occurred an error during creation of new course</response>
            POST: api/courses
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.CoursesController.GetCourses(FlashCards.Models.DTOs.ToServer.CourseParams)">
            <summary>
            Gets list of courses as paged list
            </summary>
            <remarks>
            Sample request:
            
                GET /api/courses
                    {
                        "pageSize": 10,
                        "pageNumber": 1,
                        "courseType": 0
                    }
            
            Additional information:
                - For "courseType" -> (0 - public, 1 - private, 2 - draft)
            </remarks>
            <param name="courseParams">DTO</param>
            <returns>Status</returns>
            <response code="200">Returns paged list with additional information about pages in header "Pagination"</response>
            <response code="400">When incoming data was invalid. Returns model state information</response>
            <response code="401">If token has expired</response>
            GET: api/courses
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.CoursesController.GetCourse(System.Int32)">
            <summary>
            Get detailed information about course
            </summary>
            <param name="id">Course ID</param>
            <returns>Status</returns>
            <response code="200">Returns detailed information about course</response>
            <response code="400">If course with given id was not found</response>
            <response code="401">If token has expired</response>
            GET: api/courses/{id}
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.CoursesController.UpdateCourse(System.Int32,FlashCards.Models.DTOs.ToServer.CourseForUpdate)">
            <summary>
            Update information about course
            </summary>
            <remarks>
            Sample request:
            
                PUT /api/courses/{id}
                    {
                        "name": "New course name",
                        "description": "New course sample description",
                        "courseType": 0
                    }
            
            Additional information:
                - For "courseType" -> (0 - public, 1 - private, 2 - draft)
            </remarks>
            <param name="id">Course ID</param>
            <param name="courseForUpdate">DTO</param>
            <returns>Status</returns>
            <response code="200">If update was successful</response>
            <response code="400">If sent data was invalid (returns model state) or course with given id does not exists (returns error message)</response>
            <response code="401">If token has expired or user has no access to edit this course</response>
            <response code="500">If during update occurred an error</response>
            PUT: api/courses/{id}
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.FlashcardsController.GetFlashcards(System.Int32)">
            <summary>
            Get all flashcards from lesson
            </summary>
            <param name="lessonId"></param>
            <returns></returns>
            GET: api/courses/{courseId}/lessons/{lessonId}/flashcards
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.FlashcardsController.GetFlashcard(System.Int32)">
            <summary>
            Get flashcard
            </summary>
            <param name="id">Flashcard ID</param>
            <returns></returns>
            GET: api/courses/{courseId}/lessons/{lessonId}/flashcards/{id}
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.FlashcardsController.CreateFlashcard(System.Int32,System.Int32,FlashCards.Models.DTOs.ToServer.FlashcardForCreate)">
            <summary>
            Creates new flashcard to lesson
            </summary>
            <remarks>
            Sample request:
            
                POST /api/courses/34/lessons/232/flashcards
                    {
                        "phrase": "Additional",
                        "phrasePronunciation": "əˈdiSH(ə)n(ə)l",
                        "phraseSampleSentence": "I have an additional monitor for work",
                        "phraseComment": "",
                        "translatedPhrase": "Dodatkowy",
                        "translatedPhraseSampleSentence": "Mam dodatkowy monitor do pracy",
                        "translatedPhraseComment": "",
                        "languageLevel": 2,
                        "category": "miscellaneous"
                    }
                    
            </remarks>
            <param name="courseId">Course ID</param>
            <param name="lessonId">Lesson ID</param>
            <param name="flashcardForCreate">Flashcard DTO</param>
            <response code="200">If create was successful</response>
            <response code="400">If sent data was invalid (returns model state)</response>
            <response code="401">If token has expired or user has no access to edit this course</response>
            <response code="404">If lesson with given id has not been found</response>
            <response code="500">If during create occurred an error</response>
            <returns>Status</returns>
            POST api/courses/{courseId}/lessons/{lessonId}/flashcards
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.FlashcardsController.UpdateFlashcard(System.Int32,System.Int32,FlashCards.Models.DTOs.ToServer.FlashcardForUpdate)">
            <summary>
            Updates flashcard data
            </summary>
            <remarks>
            Sample request:
            
                POST /api/courses/34/lessons/232/flashcards
                    {
                        "phrase": "Additional",
                        "phrasePronunciation": "əˈdiSH(ə)n(ə)l",
                        "phraseSampleSentence": "I have an additional monitor for work",
                        "phraseComment": "",
                        "translatedPhrase": "Dodatkowy",
                        "translatedPhraseSampleSentence": "Mam dodatkowy monitor do pracy",
                        "translatedPhraseComment": "",
                        "languageLevel": 2,
                        "category": "miscellaneous"
                    }
                    
            </remarks>
            <param name="courseId">Course ID</param>
            <param name="id">Flashcard ID</param>
            <param name="flashcardForUpdate">Flashcard DTO</param>
            <response code="200">If create was successful</response>
            <response code="400">If sent data was invalid (returns model state)</response>
            <response code="401">If token has expired or user has no access to edit this course</response>
            <response code="404">If lesson with given id has not been found</response>
            <response code="500">If during create occurred an error</response>
            <returns>Status</returns>
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.LessonsController.GetLessonDetail(System.Int32,System.Int32)">
            <summary>
            Get details about lesson
            </summary>
            <param name="courseId"></param>
            <param name="id">Lesson ID</param>
            <returns>Status</returns>
            <response code="200">Detailed info about lesson</response>
            <response code="401">If token has expired</response>
            <response code="404">If lesson has been not found</response>
            GET: api/courses/{courseId}/lessons/{id}
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.LessonsController.GetLessons(System.Int32,FlashCards.Models.DTOs.ToServer.LessonParams)">
            <summary>
            Get paged list of courses
            </summary>
            <remarks>
            Sample request:
            
                GET /api/courses/34/lessons
                    {
                        "pageSize": 10,
                        "pageNumber": 1,
                        "category": "home"
                    }
            
            </remarks>
            <param name="courseId">Course ID</param>
            <param name="lessonParams">Paged list parameters</param>
            <response code="200">Returns paged list of lessons</response>
            <response code="400">If incoming data was invalid</response>
            <response code="401">If token has expired</response>
            <returns>Status</returns>
            GET: /api/courses/{courseId}/lessons
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.LessonsController.CreateLesson(System.Int32,FlashCards.Models.DTOs.ToServer.LessonForCreate)">
            <summary>
            Creates new lesson in course
            </summary>
            <remarks>
            Sample request:
            
                POST /api/courses/23/lessons
                    {
                        "name": "Things in house",
                        "description": "The lesson contains vocabulary for use in house",
                        "category": "house"
                    }
                    
            </remarks>
            <param name="courseId">Course id where new lesson will be created</param>
            <param name="lessonForCreate">DTO</param>
            <response code="200">If creation was successfull</response>
            <response code="400">If incoming data was invalid</response>
            <response code="401">If token has expired or user has no ability to add new lesson to course</response>
            <response code="404">If course with given id was not found</response>
            <response code="500">If occurred error during creation a new lesson</response>
            <returns>Status</returns>
            POST: api/courses/{courseId}/lessons
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.LessonsController.UpdateLesson(System.Int32,System.Int32,FlashCards.Models.DTOs.ToServer.LessonForUpdate)">
            <summary>
            Updates lesson data
            </summary>
            <remarks>
            Sample request:
            
                PUT /api/courses/23/lessons/546
                    {
                        "name": "New lesson name",
                        "description": "New description for lesson",
                        "category": "law"
                    }
                    
            </remarks>
            <param name="courseId">Course ID</param>
            <param name="id">Lesson ID</param>
            <param name="lessonForUpdate">New data for lesson</param>
            <response code="200">If update was successfull</response>
            <response code="400">If incoming data was invalid</response>
            <response code="401">If token has expired or user has no ability to add new lesson to course</response>
            <response code="404">If lesson with given id was not found</response>
            <response code="500">If occurred error during update a new lesson</response>
            <returns>Status</returns>
            PUT: api/courses/{courseId}/lessons/{lessonId}
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.SubscriptionsController.GetCoursesPaged(FlashCards.Models.DTOs.ToServer.SubscribedCoursesParams)">
             <summary>
             Get subscribed courses as paged list
             </summary>
             <remarks>
             Sample request:
             
                 GET /api/subscriptions
                     {
                         "pageSize": 10,
                         "pageNumber": 1
                     }
            
             </remarks>
             <param name="subscribedCoursesParams"></param>
             <response code="200">Returns subscribed courses</response>
             <returns>Status</returns>
             GET api/subscriptions
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.SubscriptionsController.SubscribeCourse(System.Int32)">
            <summary>
            Subscribe course
            </summary>
            <param name="courseId">Course ID</param>
            <returns>Status</returns>
            <response code="200">Returns subscribed course details</response>
            <response code="400">When incoming data was invalid. Returns model state information</response>
            POST api/subscriptions/subscribe/{courseId}
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.SubscriptionsController.UnsubscribeCourse(System.Int32)">
            <summary>
            Unsubscribe course
            </summary>
            <param name="id">Subscription ID</param>
            <response code="200">Returned if unsubscribe course completed successfully</response>
            <response code="400">When incoming data was invalid. Returns model state information</response>
            <returns>Status</returns>
            PUT api/subscriptions/unsubscribe/{id}
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.UsersController.GetUser(System.Int32)">
            <summary>
            Get detail user information
            </summary>
            <param name="id">User ID</param>
            <returns>User detail information</returns>
            <response code="200">Detail information about user</response>
            <response code="400">When given user id doesn't exist in database</response>
            GET: /api/users/{id}
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.UsersController.GetUsers">
            <summary>
            List of users
            </summary>
            <returns>List of users</returns>
            <response code="200">List of users or empty list</response>
            GET: /api/users
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.UsersController.ChangePassword(System.Int32,FlashCards.Models.DTOs.ToServer.UserForPasswordChange)">
            <summary>
            Change user password
            </summary>
            <remarks>
            Sample request:
            
                PUT /api/users/{id}/changePassword
                    {
                        "oldPassword": "password",
                        "newPassword": "newbetterpassword",
                    }
                    
            </remarks>
            <param name="id"></param>
            <param name="userForPasswordChange"></param>
            <returns>Status of operation</returns>
            <response code="200">When changing password was successful</response>
            <response code="401">When access token or old password was invalid</response>
            PUT /api/users/{id}/changePassword
        </member>
        <member name="M:FlashCards.WebAPI.Controllers.UsersController.UpdateUser(System.Int32,FlashCards.Models.DTOs.ToServer.UserForUpdate)">
            <summary>
            Update user credentials
            </summary>
            <remarks>
            Sample request:
            
                PUT /api/users/{id}
                    {
                        "firstName": "John",
                        "lastName": "Smith",
                        "displayName": "JSmit32",
                        "city": "Chicago",
                        "country": "United States",
                    }
                    
            </remarks>
            <param name="id">User ID</param>
            <param name="userForUpdate"></param>
            <returns></returns>
            PUT /api/users/{id}
        </member>
    </members>
</doc>
