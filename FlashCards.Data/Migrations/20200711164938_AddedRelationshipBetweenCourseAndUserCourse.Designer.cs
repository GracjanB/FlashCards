// <auto-generated />
using System;
using FlashCards.Data.DataModel;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FlashCards.Data.Migrations
{
    [DbContext(typeof(FlashcardsDataModel))]
    [Migration("20200711164938_AddedRelationshipBetweenCourseAndUserCourse")]
    partial class AddedRelationshipBetweenCourseAndUserCourse
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FlashCards.Data.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(32);

                    b.Property<string>("FirstName")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(64);

                    b.Property<string>("LastName")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("FlashCards.Data.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountCreatedId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasColumnType("NTEXT")
                        .HasMaxLength(4000);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("AccountCreatedId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("FlashCards.Data.Models.CourseInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AmountOfEnrolled")
                        .HasColumnType("INT");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId")
                        .IsUnique();

                    b.ToTable("CourseInfos");
                });

            modelBuilder.Entity("FlashCards.Data.Models.CourseOpinion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasColumnType("NTEXT")
                        .HasMaxLength(4000);

                    b.Property<byte>("Rating")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseOpinions");
                });

            modelBuilder.Entity("FlashCards.Data.Models.Flashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(64);

                    b.Property<string>("LanguageLevel")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(4);

                    b.Property<int>("LessonId")
                        .HasColumnType("int");

                    b.Property<string>("Phrase")
                        .IsRequired()
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(64);

                    b.Property<string>("PhraseComment")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(128);

                    b.Property<string>("PhrasePronunciation")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(64);

                    b.Property<string>("PhraseSampleSentence")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(128);

                    b.Property<string>("TranslatedPhrase")
                        .IsRequired()
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(64);

                    b.Property<string>("TranslatedPhraseSampleSentence")
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(128);

                    b.HasKey("Id");

                    b.HasIndex("LessonId");

                    b.ToTable("Flashcards");
                });

            modelBuilder.Entity("FlashCards.Data.Models.Lesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(64);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("DATETIME2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("DATETIME2");

                    b.Property<string>("Description")
                        .HasColumnType("NTEXT")
                        .HasMaxLength(1024);

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Lessons");
                });

            modelBuilder.Entity("FlashCards.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(128);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(256);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("NVARCHAR")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FlashCards.Data.Models.UserCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CourseId");

                    b.ToTable("UserCourses");
                });

            modelBuilder.Entity("FlashCards.Data.Models.UserFlashcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsLearned")
                        .HasColumnType("BIT");

                    b.Property<DateTime>("LastTrainingDate")
                        .HasColumnType("DATETIME2");

                    b.Property<byte>("LearningRate")
                        .HasColumnType("TINYINT");

                    b.Property<bool>("MarkedAsHard")
                        .HasColumnType("BIT");

                    b.HasKey("Id");

                    b.ToTable("UserFlashcards");
                });

            modelBuilder.Entity("FlashCards.Data.Models.UserLesson", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LastTrainingDate")
                        .HasColumnType("DATETIME2");

                    b.Property<byte>("ProgressPercentage")
                        .HasColumnType("TINYINT");

                    b.HasKey("Id");

                    b.ToTable("UserLessons");
                });

            modelBuilder.Entity("FlashCards.Data.Models.Course", b =>
                {
                    b.HasOne("FlashCards.Data.Models.Account", "AccountCreated")
                        .WithMany("CreatedCourses")
                        .HasForeignKey("AccountCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlashCards.Data.Models.CourseInfo", b =>
                {
                    b.HasOne("FlashCards.Data.Models.Course", "Course")
                        .WithOne("CourseInfo")
                        .HasForeignKey("FlashCards.Data.Models.CourseInfo", "CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlashCards.Data.Models.CourseOpinion", b =>
                {
                    b.HasOne("FlashCards.Data.Models.Course", "Course")
                        .WithMany("Opinions")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlashCards.Data.Models.Flashcard", b =>
                {
                    b.HasOne("FlashCards.Data.Models.Lesson", "Lesson")
                        .WithMany("Flashcards")
                        .HasForeignKey("LessonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlashCards.Data.Models.Lesson", b =>
                {
                    b.HasOne("FlashCards.Data.Models.Course", "Course")
                        .WithMany("Lessons")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlashCards.Data.Models.User", b =>
                {
                    b.HasOne("FlashCards.Data.Models.Account", "Account")
                        .WithOne("User")
                        .HasForeignKey("FlashCards.Data.Models.User", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlashCards.Data.Models.UserCourse", b =>
                {
                    b.HasOne("FlashCards.Data.Models.Account", "Account")
                        .WithMany("CoursesEnrolled")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlashCards.Data.Models.Course", "Course")
                        .WithMany("UserCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
